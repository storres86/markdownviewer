{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","input","placeholder","handleChange","bind","event","this","setState","target","value","marked","require","html","setOptions","gfm","headerIds","document","getElementById","console","log","innerHTML","className","id","onChange","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"4OAGMA,G,wDACJ,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXC,MAAQC,GAGV,EAAKC,aAAa,EAAKA,aAAaC,KAAlB,gBANP,E,yDAWFC,GACbC,KAAKC,SAAS,CAACN,MAAMI,EAAMG,OAAOC,U,0CAIhC,IAAMC,EAASC,EAAQ,GACfC,EAAOF,EAAOJ,KAAKN,MAAMC,OAC/BS,EAAOG,WAAW,CAEhBC,KAAI,EACJC,WAAU,IAGRC,SAASC,eAAe,aAC5BC,QAAQC,IAAI,eACZH,SAASC,eAAe,WAAWG,UAAYR,K,+BAU/C,IAAMF,EAASC,EAAQ,GACjBC,EAAOF,EAAOJ,KAAKN,MAAMC,OAiBjC,OAdMe,SAASC,eAAe,aAC5BC,QAAQC,IAAI,eACZH,SAASC,eAAe,WAAWG,UAAYR,GAM/CF,EAAOG,WAAW,CAEhBC,KAAI,EACJC,WAAU,IAIhB,sBAAKM,UAAU,MAAf,UACA,8CACE,0BAAUC,GAAG,SAASb,MAAOH,KAAKN,MAAMS,MAAOc,SAAUjB,KAAKH,aAA9D,SAA6EG,KAAKN,MAAMC,QAExF,qBAAKqB,GAAG,YACR,uBAEA,qCACA,8B,GAhEgBE,IAAMC,YAyElBvB,EAAW,qmCA6CFH,IC7GA2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAEL,cAAC,EAAD,IAEFpB,SAASC,eAAe,SAM1BS,M","file":"static/js/main.863a0119.chunk.js","sourcesContent":["import React, {Component} from \"react\"\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      input : placeholder,\n      \n    }\n    this.handleChange=this.handleChange.bind(this);\n  }\n\n  \n\nhandleChange(event){\nthis.setState({input:event.target.value})\n}\n\ncomponentDidMount(){\n  const marked = require(\"marked\");\n    const html = marked(this.state.input);\n    marked.setOptions({\n      // renderer: new marked.Renderer(),\n      gfm:true,\n      headerIds:false,\n      })\n  function preview(){ \n    if (document.getElementById(\"preview\")){\n    console.log(\"did you run\");\n    document.getElementById(\"preview\").innerHTML = html;\n      }\n    }\n    preview();\n}\n\n\n\n\n  render(){\n    const marked = require(\"marked\");\n    const html = marked(this.state.input);\n    \n     function preview(){ \n    if (document.getElementById(\"preview\")){\n    console.log(\"did you run\");\n    document.getElementById(\"preview\").innerHTML = html;\n      }\n    }\n\n    preview();\n\n    marked.setOptions({\n      // renderer: new marked.Renderer(),\n      gfm:true,\n      headerIds:false,\n      })\n\n  return( \n<div className=\"App\">\n<h1>Hello World!</h1>\n  <textarea id=\"editor\" value={this.state.value} onChange={this.handleChange}>{this.state.input}</textarea>\n  {/* <p id=\"preview\">{this.state.input}</p> */}\n  <div id=\"preview\"></div>\n  <br  />\n  {/* <p>{this.state.input}</p> */}\n  <p>poop</p>\n  <br />\n  \n \n  \n    </div>\n  );\n  }\n}\n\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}